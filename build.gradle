/*
 * Copyright (c) 2014, CleverDATA, LLC. All Rights Reserved.
 *
 * All information contained herein is, and remains the property of CleverDATA, LLC.
 * The intellectual and technical concepts contained herein are proprietary to
 * CleverDATA, LLC. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained from
 * CleverDATA, LLC.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 */

import groovy.io.FileType

buildscript {
    apply from: 'libraries.gradle'
    apply from: 'repositories.gradle'
    repositories repos.resolve.all
}

ext {
    meta = [
        buildBy: System.getProperty('user.name'),
        createdBy: "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
        orgName: 'CleverData Inc.',
        orgUrl: 'http://www.cleverdata.ru',
        projectGroup: 'ru.cleverdata.dmpkit.gradle.plugin',
    ]
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin' // make gradle's testkit happy
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'signing'

repositories repos.resolve.all
dependencies {
    implementation libs.external.gradleApi
    implementation libs.external.gradleGroovy
    implementation libs.external.grgit

    testImplementation libs.external.hamcrest
    testImplementation libs.external.testng

    jacocoAnt libs.external.jacoco
    jacocoAgent libs.external.jacocoAgent
}

// apply plugin to itself
def scriptEngine = new GroovyScriptEngine(
    sourceSets.main.allSource.srcDirs as String[],
    new URLClassLoader(configurations.runtimeClasspath.collect { it.toURI().toURL() } as URL[], buildscript.classLoader)
)
sourceSets.main.allSource.srcDirs.each { File srcDir ->
    if (srcDir.exists()) {
        srcDir.traverse(type: FileType.FILES, nameFilter: ~/.*Plugin\.groovy/) {
            String pluginPath = srcDir.toPath().relativize(it.toPath()).toString()
            apply plugin: scriptEngine.loadScriptByName(pluginPath)
        }
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        vcs = 'Git'
    }
    module {
        name = project.name
    }
}

group meta.projectGroup
description 'CLEVERDATA :: DMPKIT :: GRADLE :: PLUGIN :: RELEASE'

defaultTasks 'build'
buildDir 'target'

model {
    publishing {
        publications {
            pluginMaven {
                artifact sourceJar {
                    classifier 'sources'
                }
                pom {
                    name = 'DMPkit Gradle Release Plugin'
                    description = 'Provides additional tasks prefixed with dmpkit to release git projects easier'
                    url = 'https://github.com/cleverdata/dmpkit-gradle-release-plugin'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'mpryakhin'
                            name = 'Mike Pryakhin'
                            email = 'm.pryahin@cleverdata.ru'
                        }
                        developer {
                            id = 'rsharipov'
                            name = 'Rinat Sharipov'
                            email = 'r.sharipov@cleverdata.ru'
                        }
                        developer {
                            id = 'szhemzhitsky'
                            name = 'Sergey Zhemzhitsky'
                            email = 's.zhemzhitsky@cleverdata.ru'
                        }
                    }
                    organization {
                        name = 'CleverDATA'
                        url = 'http://cleverdata.ru/en'
                    }
                    scm {
                        connection = 'scm:git:git@github.com:cleverdata/dmpkit-gradle-release-plugin.git'
                        developerConnection = 'scm:git:ssh://git@github.com:cleverdata/dmpkit-gradle-release-plugin.git'
                        url = 'https://github.com/cleverdata/dmpkit-gradle-release-plugin'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/cleverdata/dmpkit-gradle-release-plugin/issues'
                    }
                    distributionManagement {
                        downloadUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    }
                    packaging = 'jar'
                }
            }
        }
        signing {
            sign publications
        }
        repositories repos.publish.smart
    }
}

tasks.withType(GroovyCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}
artifacts.archives sourceJar

configurations {
    itestImplementation.extendsFrom testImplementation
}

sourceSets {
    itest
}

test {
    useTestNG()
    testLogging {
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
    include '**/*Test.class'
}

task itest(type: Test) {
    description 'Runs the integration tests'
    useTestNG()
    testLogging {
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }

    include '**/*IT.class'
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }
}
jacocoTestReport.dependsOn test, itest
check.dependsOn jacocoTestReport

jar.doFirst {
    manifest {
        attributes (
            'Created-By': meta.createdBy,
            'Built-By': meta.buildBy,

            'Build-Branch': dmpkitRelease.currentBranch(),
            'Build-Revision': dmpkitRelease.revision(),
            'Build-Timestamp': System.currentTimeMillis(),

            'Implementation-Title': project.description,
            'Implementation-Vendor': meta.orgName,
            'Implementation-Vendor-Id': project.group,
            'Implementation-Version': project.version,
            'Implementation-URL': meta.orgUrl,

            'Specification-Title': project.description,
            'Specification-Version': project.version,
            'Specification-Vendor': meta.orgName
        )
    }
}

gradlePlugin {
    plugins {
        // using dmpkitGradleRelease instead of dmpkitRelease as we are applying this plugin to itself
        dmpkitGradleRelease {
            id = 'cleverdata-dmpkit-gradle-release'
            implementationClass = 'ru.cleverdata.dmpkit.gradle.plugin.release.ReleasePlugin'
        }
    }
    testSourceSets sourceSets.itest
}

dmpkitRelease {
    envBuildNumber = 'BUILD_NUMBER'
    envDefaultBranch = 'BRANCH_NAME'
}
